# Inventory
type I {
    predicates {
        in(portable, I);
    }

    rules {
        take(portable, r) :: $at(P, r) & at(portable, r) -> in(portable, I);
        drop(portable, r) :: $at(P, r) & in(portable, I) -> at(portable, r);

        take(portable, container)   :: $reachable_contents(container) & in(portable, container) -> in(portable, I);
        insert(portable, container) :: $reachable_contents(container) & in(portable, I) -> in(portable, container);

        take(portable, supporter) :: $reachable(supporter) & on(portable, supporter) -> in(portable, I);
        put(portable, supporter)  :: $reachable(supporter) & in(portable, I) -> on(portable, supporter);
    }

    reverse_rules {
        take(portable, r) :: drop(portable, r);
        take(portable, container) :: insert(portable, container);
        take(portable, supporter) :: put(portable, supporter);
    }

    inform7 {
        predicates {
            in(portable, I) :: "The player carries the {portable}";
        }

        commands {
            take(portable, r) :: "take {portable}" :: "taking the {portable}";
            drop(portable, r) :: "drop {portable}" :: "dropping the {portable}";

            take(portable, container)   :: "take {portable} from {container}" :: "removing the {portable} from the {container}";
            insert(portable, container) :: "insert {portable} into {container}" :: "inserting the {portable} into the {container}";

            take(portable, supporter) :: "take {portable} from {supporter}" :: "removing the {portable} from the {supporter}";
            put(portable, supporter)  :: "put {portable} on {supporter}" :: "putting the {portable} on the {supporter}";

            inventory :: "inventory" :: "taking inventory";
        }
    }
}
