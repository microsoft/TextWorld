# Inventory
type I {
    predicates {
        in(o, I);
    }

    rules {
        inventory  :: at(P, r) -> at(P, r);  # Nothing changes.

        take       :: $at(P, r) & at(o, r) -> in(o, I);
        
        take/c     :: $at(P, r) & $at(c, r) & $open(c) & in(o, c) -> in(o, I);
        insert/c   :: $at(P, r) & $at(c, r) & $open(c) & in(o, I) -> in(o, c);

        take/cs    :: $at(P, r) & $at(s, r) & $on(c, s) & $open(c) & in(o, c) -> in(o, I);
        insert/cs  :: $at(P, r) & $at(s, r) & $on(c, s) & $open(c) & in(o, I) -> in(o, c);

        take/s     :: $at(P, r) & $at(s, r) & on(o, s) -> in(o, I);
        hook       :: $at(P, r) & $at(s, r) & in(o, I) -> on(o, s);

        examine/I  :: in(o, I) -> in(o, I);  # Nothing changes.
        examine/s  :: at(P, r) & $at(s, r) & $on(o, s) -> at(P, r);  # Nothing changes.
        examine/c  :: at(P, r) & $at(c, r) & $open(c) & $in(o, c) -> at(P, r);  # Nothing changes.
        examine/or :: at(P, r) & $in(o, r) -> at(P, r);  # Nothing changes.
        examine/oc :: at(P, r) & $at(c, r) & $open(c) & $in(o, c) -> at(P, r);  # Nothing changes.
        examine/os :: at(P, r) & $at(s, r) & $on(o, s) -> at(P, r);  # Nothing changes.
    }

    reverse_rules {    
        inventory  :: inventory;

        take/c     :: insert/c;
        take/s     :: hook;
        take/cs    :: insert/cs;

        examine/I  :: examine/I;
        examine/s  :: examine/s;
        examine/c  :: examine/c;
        examine/or :: examine/or;
        examine/oc :: examine/oc;
        examine/os :: examine/os;
    }

    inform7 {
        predicates {
            in(o, I) :: "The player carries the {o}";
        }

        commands {

            inventory  :: "inventory" :: "taking inventory";

            take       :: "take {o}" :: "taking the {o}";                

            take/c     :: "take {o} from {c}" :: "removing the {o} from the {c}";
            insert/c   :: "insert {o} into {c}" :: "inserting the {o} into the {c}";

            take/cs    :: "take {o} from {c}" :: "removing the {o} from the {c}";
            insert/cs  :: "insert {o} into {c}" :: "inserting the {o} into the {c}";

            take/s     :: "take {o} from {s}" :: "removing the {o} from the {s}";
            hook       :: "hook {o} on {s}" :: "hooking the {o} on the {s}";

            examine/I  :: "examine {o}" :: "examining the {o}";
            examine/s  :: "examine {o}" :: "examining the {o}";
            examine/c  :: "examine {o}" :: "examining the {o}";
            examine/or :: "examine {o}" :: "examining the {o}";
            examine/oc :: "examine {o}" :: "examining the {o}";
            examine/os :: "examine {o}" :: "examining the {o}";
        }
    }
}
