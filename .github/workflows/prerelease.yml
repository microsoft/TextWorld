name: "Prerelease"

# Trigger the create release workflow
on:
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheel for cp${{ matrix.python }}-${{ matrix.platform_id }}-${{ matrix.manylinux_image }}
    runs-on: ${{ matrix.os }}
    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        include:
          # Linux 64 bit manylinux2014
          - os: ubuntu-latest
            python: 39
            platform_id: manylinux_x86_64
            manylinux_image: manylinux2014
          - os: ubuntu-latest
            python: 310
            platform_id: manylinux_x86_64
            manylinux_image: manylinux2014
          - os: ubuntu-latest
            python: 311
            platform_id: manylinux_x86_64
            manylinux_image: manylinux2014
          - os: ubuntu-latest
            python: 312
            platform_id: manylinux_x86_64
            manylinux_image: manylinux2014

          # MacOS x86_64
          - os: macos-12
            python: 39
            platform_id: macosx_x86_64
          - os: macos-12
            python: 310
            platform_id: macosx_x86_64
          - os: macos-12
            python: 311
            platform_id: macosx_x86_64
          - os: macos-12
            python: 312
            platform_id: macosx_x86_64

          # MacOS arm64
          - os: macos-14
            python: 39
            platform_id: macosx_arm64
          - os: macos-14
            python: 310
            platform_id: macosx_arm64
          - os: macos-14
            python: 311
            platform_id: macosx_arm64
          - os: macos-14
            python: 312
            platform_id: macosx_arm64

    steps:
      - name: Checkout TextWorld
        uses: actions/checkout@v4

      - name: Use Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies on macos
        if: startsWith(matrix.os, 'macos')
        run: |
          brew install glkclient
          brew install glkview
          brew install zoomview

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel

      - name: Build and test wheels
        env:
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
          CIBW_ARCHS: all
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_BUILD_VERBOSITY: 1
          # MACOSX_DEPLOYMENT_TARGET: "10.13"

        run: python -m cibuildwheel --output-dir wheelhouse

      - uses: actions/upload-artifact@v4
        with:
          name: tw-wheels-cp${{ matrix.python }}-${{ matrix.platform_id }}
          path: wheelhouse/*.whl
          if-no-files-found: error

  # Build the source distribution under Linux
  build_sdist:
    name: Source distribution
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
            python -m pip install --upgrade pip
            pip install build
      - name: Build package
        run: python -m build --sdist
      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tw-sdist
          path: dist/*.tar.gz
          if-no-files-found: error

  release:
    name: >-
        Publish TextWorld ðŸ“¦ to PyPI
    needs:
      - build_wheels
      - build_sdist
    runs-on: ubuntu-latest
    environment:
      name: prerelease
      url: https://pypi.org/project/textworld/
    permissions:
      id-token: write  # mandatory for trusted publishing
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: tw-*
          path: dist
          merge-multiple: true
      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  test:
    needs: release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python: ['3.9', '3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
      - name: Use Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - name: Install dependencies
        run: |
            python -m pip install --upgrade pip
            pip install pytest pytest-azurepipelines pytest-cov
            pip install --pre textworld[full]
      - name: Run tests
        run: |
            pytest --durations=10 --junitxml=junit/test-results.xml --cov=textworld --cov-report=xml --cov-report=html tests/ textworld/
      - uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: junit/test-results.xml
